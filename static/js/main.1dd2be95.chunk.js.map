{"version":3,"sources":["components/Header.js","components/Timer.js","components/TimerController.js","App.js","index.js","assets/TOWERCLO.mp3"],"names":["Header","className","library","add","faSyncAlt","faPlay","faPause","Timer","props","id","timerLabel","timeDisplayed","onClick","handleStartStop","icon","isRunning","reset","faCaretUp","faCaretDown","TimerController","controllerId","label","length","onNewValue","App","useState","breakMinutes","setBreakMinutes","sessionMinutes","setSessionMinutes","defaultSessionMinutes","seconds","setSeconds","isSession","setIsSession","setIsRunning","beepAudioRef","useRef","minutesDisplayed","Math","floor","toLocaleString","minimumIntegerDigits","maximumFractionDigits","secondsDisplayed","useEffect","interval","setInterval","prevSeconds","current","play","clearInterval","paused","pause","currentTime","ref","src","soundfile","newValue","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1dd2be95.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n        <h1>Pomodoro Clock</h1>\n    </div>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSyncAlt, faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\nlibrary.add(faSyncAlt, faPlay, faPause);\n\nfunction Timer(props) {\n  return (\n    <div id=\"timer\">\n      <div id=\"timer-display\">\n        <div\n          id=\"timer-label\"\n          // style={props.isSession ? { color: \"#b61b00\" } : { color: \"#0c6900\" }}\n        >\n          {props.timerLabel}\n        </div>\n        <div id=\"time-left\">{props.timeDisplayed}</div>\n      </div>\n      <div className=\"timer-button\">\n        <button id=\"start_stop\" onClick={props.handleStartStop}>\n          <FontAwesomeIcon icon={!props.isRunning ? faPlay : faPause} />\n        </button>\n        <button id=\"reset\" onClick={props.reset}>\n          <FontAwesomeIcon icon={faSyncAlt} />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n","import React from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretUp, faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faCaretUp, faCaretDown);\n\nfunction TimerController(props) {\n  const increment = () => {\n    if (props.length >= 1 && props.length < 60 && !props.isRunning) {\n      props.onNewValue(props.length + 1);\n    }\n  };\n  const decrement = () => {\n    if (props.length > 1 && props.length <= 60 && !props.isRunning) {\n      props.onNewValue(props.length - 1);\n    }\n  };\n\n  return (\n    <div id={props.controllerId + \"-controller\"}>\n      <p id={props.controllerId + \"-label\"}>{props.label}</p>\n      <div className=\"spinner\">\n        <button id={props.controllerId + \"-decrement\"} onClick={decrement}>\n          <FontAwesomeIcon icon={faCaretDown} />\n        </button>\n\n        <div id={props.controllerId + \"-length\"}> {props.length}</div>\n        <button id={props.controllerId + \"-increment\"} onClick={increment}>\n          <FontAwesomeIcon icon={faCaretUp} />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default TimerController;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"./components/Header\";\nimport Timer from \"./components/Timer\";\nimport TimerController from \"./components/TimerController\";\nimport \"./styles/style.scss\";\nimport soundfile from \"./assets/TOWERCLO.mp3\";\n\nfunction App() {\n  const defaultSessionMinutes = 25;\n  const defaultBreakMinutes = 5;\n\n  const [breakMinutes, setBreakMinutes] = useState(defaultBreakMinutes);\n  const [sessionMinutes, setSessionMinutes] = useState(defaultSessionMinutes);\n  const [seconds, setSeconds] = useState(defaultSessionMinutes * 60);\n  const [isSession, setIsSession] = useState(true);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const beepAudioRef = useRef();\n\n  const timeDisplayed = (() => {\n    const minutesDisplayed = Math.floor(seconds / 60).toLocaleString(\"en\", {\n      minimumIntegerDigits: 2,\n      maximumFractionDigits: 0,\n    });\n    const secondsDisplayed = (seconds - minutesDisplayed * 60).toLocaleString(\n      \"en\",\n      {\n        minimumIntegerDigits: 2,\n        maximumFractionDigits: 0,\n      }\n    );\n    return `${minutesDisplayed}:${secondsDisplayed}`;\n  })();\n\n  const handleStartStop = () => {\n    setIsRunning(!isRunning);\n  };\n\n  const reset = () => {\n    setBreakMinutes(defaultBreakMinutes);\n    setSessionMinutes(defaultSessionMinutes);\n    setSeconds(defaultSessionMinutes * 60);\n    setIsSession(true);\n    setIsRunning(false);\n\n    if (!beepAudioRef.current.paused) {\n      beepAudioRef.current.pause();\n      beepAudioRef.current.currentTime = 0;\n    }\n  };\n\n  const onBreakMinutesNewValue = (newValue) => {\n    setBreakMinutes(newValue);\n    if (!isRunning && !isSession) {\n      setSeconds(newValue * 60);\n    }\n  };\n\n  const onSessionMinutesNewValue = (newValue) => {\n    setSessionMinutes(newValue);\n    if (!isRunning && isSession) {\n      setSeconds(newValue * 60);\n    }\n  };\n\n  let timerLabel;\n  if (isSession) {\n    timerLabel = \"Session\";\n  } else {\n    timerLabel = \"Break\";\n  }\n\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setSeconds((prevSeconds) => {\n          if (prevSeconds <= 0) {\n            setIsSession(!isSession);\n\n            beepAudioRef.current.play();\n            return isSession ? breakMinutes * 60 : sessionMinutes * 60;\n          } else {\n            return prevSeconds - 1;\n          }\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isSession, breakMinutes, sessionMinutes, isRunning]);\n\n  return (\n    <div\n      className=\"App\"\n      // style={\n      //   !isSession\n      //     ? { background: \"linear-gradient(#eaefb1, #B5D6B2)\" }\n      //     : { background: \"linear-gradient(#FDF15F, #ffbc4b)\" }\n      // }\n    >\n      <Header />\n      <Timer\n        timeDisplayed={timeDisplayed}\n        timerLabel={timerLabel}\n        reset={reset}\n        handleStartStop={handleStartStop}\n        isRunning={isRunning}\n        isSession={isSession}\n      />\n      <audio id=\"beep\" ref={beepAudioRef} src={soundfile}></audio>\n      <div className=\"timer-controller\">\n        <TimerController\n          controllerId=\"break\"\n          label=\"Break\"\n          length={breakMinutes}\n          onNewValue={onBreakMinutesNewValue}\n          isRunning={isRunning}\n        />\n        <TimerController\n          controllerId=\"session\"\n          label=\"Session\"\n          length={sessionMinutes}\n          onNewValue={onSessionMinutesNewValue}\n          isRunning={isRunning}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","module.exports = __webpack_public_path__ + \"static/media/TOWERCLO.5461ce5b.mp3\";"],"sourceRoot":""}